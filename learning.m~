tic;
clear;close;

global label
label = [];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp('hi');
global domain ;
domain = [];
a = 0;
b = 100;
x_domain = (b-a).*rand(100,1) + a;
y_domain = (b-a).*rand(100,1) + a;
count = zeros(100,1);
domain = [x_domain y_domain count];
x_domain = [];
y_domain = [];
count = [];
figure
plot(domain(:,1),domain(:,2),'.')
title('Nodes generated before search');

global feasible_domain;
feasible_domain = [];
global infeasible_domain;
infeasible_domain = [];
%%%%
x = 0;%%defined first point as 0,0  which is feasible and last point as random x_2
y = 0;
x_2 = (b-a).*rand(1,1) + a;
y_2 = (b-a).*rand(1,1) + a;
% figure
% count = 2;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 for i =1 : 400
% while size(domain) ~= size(feasible_domain) - count 
    dist_prev =10000;
%     a = [x y];
    pos = [];
    %obviously the previously feasible point is last visited point
    while x ~= x_2 && y ~= y_2 
        if is_feasible_point(x,y) == 1 %a dynamic step for moving from feasible previously to x,y
            feasible_domain = vertcat(feasible_domain, [x y ]) ;%cell typpe for svm
            dist_i = sqrt((domain(:,1) - x).^2 + (domain(:,2) - y).^2);
            dist_f = sqrt((domain(:,1) - x_2).^2 + (domain(:,2) - y_2).^2)  ;
            dist = dist_i+dist_f;
            count = [];
            count = 1;
            sz = size(dist);
            while sz(1) ~= count
                if is_feasible_point(domain(count,1),domain(count,2)) == 0 && dist_i(count) <= 0.3
                    %above condition dist_i < 0.3 is the IR bound for the
                    %robot
                    infeasible_domain = vertcat(infeasible_domain, [domain(count,1) domain(count,2)]);
                    dist(count) = [];
                    dist_i(count) = [];
                    dist_f(count) = [];
                    domain(count,:) = [];
                end
                count = count +1;
                sz = [];
                sz = size(dist);
            end
            [val pos] = min(dist);
            while dist_i(pos) >= 0.3 && domain(pos,1) == x && domain(pos,2) == y || domain(pos,3) == 1
%this step is very important dis_i(pos) >= dist_f(pos) suggest that the
%robt should follow nodes  such that it should be halfway from the destined
%node / it could be compensated for dist_i(pos) >= ir bound so that robot
%will only travel the visible nodes(dead reckoning)
                dist(pos) = 10000000;
                [val pos] = min(dist);
            end    
            if dist_prev > dist_f(pos)
                x = domain(pos,1);
                y = domain(pos,2);
                domain(pos,3) = 1;  
                dist_prev = dist_f(pos)
            else
                x = x_2;
                y = y_2;
                break;
            end
            dist_i = [];
            dist_f = [];
            dist = [];
            
        else
            infeasible_domain = vertcat(infeasible_domain, [x y]);
            t = is_feasible_edge(feasible_domain(end,:),[x y]);
            x = t(1);
            y = t(2);
            domain(pos,:) = [];
            break;
        end   
    end
    domain(:,3) = 0;
    x_2 = (b-a).*rand(1,1) + a;
    y_2 = (b-a).*rand(1,1) + a;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
dist = [];
dist_i = [];
dist_f = [];
a = [];
b = [];
i = [];
x = [];
y = [];
x_2 = [];
y_2 = [];

val = [];
dist_prev = [];
count = [];
sz = [];
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   x= infeasible_domain(:,1);%following is a plot of the domian 
   %g - feasible r - infeasible y - unexplored
   y= infeasible_domain(:,2);
   x_f= feasible_domain(:,1);
   y_f= feasible_domain(:,2);
   t = 1:0.5:360;
   x_boundary = sin(t).*sqrt(100) + 50;
   y_boundary = cos(t).*sqrt(100) + 50;
   figure
t = [];
  % scatter(domain(:,1), domain(:,2),1,'y')
  % hold on
   scatter(x, y,1,'r')
legend('Infeasible')
   hold on

   
scatter(x_f, y_f,1,'g')

title('Feasible and infeasible nodes')
legend('Feasible');
 %  hold on
  % plot(x_boundary, y_boundary);
  
%    
%      figure
%      plot(x_domain,y_domain,'.');
%      figure
% %      plot(x,y);
% unexplored = 1;
% for i =1 : size(domain)
%     if is_feasible_point(domain(unexplored,1),domain(unexplored,2)) == 1
%         unexplored = unexplored + 1;
%     end
% end
% sizea = size(feasible_domain) + size(infeasible_domain);
% label = cell(sizea(1),1);
% for i =1 : size(feasible_domain) + size(infeasible_domain)
%     if i > size(feasible_domain)
%          label{i,1} = 'infeasible';
%     else
%          label{i,1} = 'feasible';
%     end
% end
domain = [];
x = [];
y = [];
x_f = [];
y_f = [];
x_boundary = [];
y_boundary = [];
toc